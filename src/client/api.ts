/**
 * WireMock
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.20.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://localhost/__admin';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class ContentPattern {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return ContentPattern.attributeTypeMap;
    }
}

export class GlobalSettings {
    'delayDistribution'?: any;
    'fixedDelay'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "delayDistribution",
            "baseName": "delayDistribution",
            "type": "any"
        },
        {
            "name": "fixedDelay",
            "baseName": "fixedDelay",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return GlobalSettings.attributeTypeMap;
    }
}

export class LoggedRequest {
    /**
    * The full URL to match against
    */
    'absoluteUrl'?: string;
    /**
    * Body string to match against
    */
    'body'?: string;
    /**
    * Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'cookies'?: any;
    /**
    * Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'headers'?: any;
    /**
    * The HTTP request method e.g. GET
    */
    'method'?: string;
    /**
    * The path and query to match exactly against
    */
    'url'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "absoluteUrl",
            "baseName": "absoluteUrl",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "cookies",
            "baseName": "cookies",
            "type": "any"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "any"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return LoggedRequest.attributeTypeMap;
    }
}

export class RequestPattern {
    'basicAuthCredentials'?: RequestPatternBasicAuthCredentials;
    /**
    * Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'bodyPatterns'?: Array<any>;
    /**
    * Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'cookies'?: any;
    /**
    * Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'headers'?: any;
    /**
    * The HTTP request method e.g. GET
    */
    'method'?: string;
    /**
    * Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    '_queryParameters'?: any;
    /**
    * The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'url'?: string;
    /**
    * The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPath'?: string;
    /**
    * The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPathPattern'?: string;
    /**
    * The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPattern'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "basicAuthCredentials",
            "baseName": "basicAuthCredentials",
            "type": "RequestPatternBasicAuthCredentials"
        },
        {
            "name": "bodyPatterns",
            "baseName": "bodyPatterns",
            "type": "Array<any>"
        },
        {
            "name": "cookies",
            "baseName": "cookies",
            "type": "any"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "any"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string"
        },
        {
            "name": "_queryParameters",
            "baseName": "queryParameters",
            "type": "any"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "urlPath",
            "baseName": "urlPath",
            "type": "string"
        },
        {
            "name": "urlPathPattern",
            "baseName": "urlPathPattern",
            "type": "string"
        },
        {
            "name": "urlPattern",
            "baseName": "urlPattern",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return RequestPattern.attributeTypeMap;
    }
}

/**
* Pre-emptive basic auth credentials to match against
*/
export class RequestPatternBasicAuthCredentials {
    'password': string;
    'username': string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "password",
            "baseName": "password",
            "type": "string"
        },
        {
            "name": "username",
            "baseName": "username",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return RequestPatternBasicAuthCredentials.attributeTypeMap;
    }
}

export class Scenarios {
    'scenarios'?: Array<ScenariosScenarios>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "scenarios",
            "baseName": "scenarios",
            "type": "Array<ScenariosScenarios>"
        }    ];

    static getAttributeTypeMap() {
        return Scenarios.attributeTypeMap;
    }
}

export class ScenariosScenarios {
    /**
    * The scenario ID
    */
    'id'?: string;
    /**
    * The scenario name
    */
    'name'?: string;
    'possibleStates'?: Array<string>;
    /**
    * The current state of this scenario
    */
    'state'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "possibleStates",
            "baseName": "possibleStates",
            "type": "Array<string>"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ScenariosScenarios.attributeTypeMap;
    }
}

export class Snapshot {
    /**
    * Filter requests for which to create stub mapping
    */
    'filters'?: any;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "filters",
            "baseName": "filters",
            "type": "any"
        }    ];

    static getAttributeTypeMap() {
        return Snapshot.attributeTypeMap;
    }
}

export class StartRecording {
    'filters'?: StartRecordingFilters;
    /**
    * Target URL when using the record and playback API
    */
    'targetBaseUrl'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "filters",
            "baseName": "filters",
            "type": "StartRecordingFilters"
        },
        {
            "name": "targetBaseUrl",
            "baseName": "targetBaseUrl",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StartRecording.attributeTypeMap;
    }
}

/**
* Filter requests for which to create stub mapping
*/
export class StartRecordingFilters {
    'basicAuthCredentials'?: RequestPatternBasicAuthCredentials;
    /**
    * Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'bodyPatterns'?: Array<any>;
    /**
    * Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'cookies'?: any;
    /**
    * Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'headers'?: any;
    /**
    * The HTTP request method e.g. GET
    */
    'method'?: string;
    /**
    * Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    '_queryParameters'?: any;
    /**
    * The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'url'?: string;
    /**
    * The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPath'?: string;
    /**
    * The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPathPattern'?: string;
    /**
    * The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPattern'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "basicAuthCredentials",
            "baseName": "basicAuthCredentials",
            "type": "RequestPatternBasicAuthCredentials"
        },
        {
            "name": "bodyPatterns",
            "baseName": "bodyPatterns",
            "type": "Array<any>"
        },
        {
            "name": "cookies",
            "baseName": "cookies",
            "type": "any"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "any"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string"
        },
        {
            "name": "_queryParameters",
            "baseName": "queryParameters",
            "type": "any"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "urlPath",
            "baseName": "urlPath",
            "type": "string"
        },
        {
            "name": "urlPathPattern",
            "baseName": "urlPathPattern",
            "type": "string"
        },
        {
            "name": "urlPattern",
            "baseName": "urlPattern",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StartRecordingFilters.attributeTypeMap;
    }
}

export class StubMapping {
    /**
    * This stub mapping's unique identifier
    */
    'id'?: string;
    /**
    * Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
    */
    'metadata'?: any;
    /**
    * The new state for the scenario to be updated to after this stub is served.
    */
    'newScenarioState'?: string;
    /**
    * Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
    */
    'persistent'?: boolean;
    /**
    * A map of the names of post serve action extensions to trigger and their parameters.
    */
    'postServeActions'?: any;
    /**
    * This stub mapping's priority relative to others. 1 is highest.
    */
    'priority'?: number;
    'request'?: StubMappingRequest;
    /**
    * The required state of the scenario in order for this stub to be matched.
    */
    'requiredScenarioState'?: string;
    'response'?: StubMappingResponse;
    /**
    * The name of the scenario that this stub mapping is part of
    */
    'scenarioName'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any"
        },
        {
            "name": "newScenarioState",
            "baseName": "newScenarioState",
            "type": "string"
        },
        {
            "name": "persistent",
            "baseName": "persistent",
            "type": "boolean"
        },
        {
            "name": "postServeActions",
            "baseName": "postServeActions",
            "type": "any"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number"
        },
        {
            "name": "request",
            "baseName": "request",
            "type": "StubMappingRequest"
        },
        {
            "name": "requiredScenarioState",
            "baseName": "requiredScenarioState",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "StubMappingResponse"
        },
        {
            "name": "scenarioName",
            "baseName": "scenarioName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StubMapping.attributeTypeMap;
    }
}

export class StubMappingRequest {
    'basicAuthCredentials'?: RequestPatternBasicAuthCredentials;
    /**
    * Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'bodyPatterns'?: Array<any>;
    /**
    * Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'cookies'?: any;
    /**
    * Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    'headers'?: any;
    /**
    * The HTTP request method e.g. GET
    */
    'method'?: string;
    /**
    * Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form
    */
    '_queryParameters'?: any;
    /**
    * The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'url'?: string;
    /**
    * The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPath'?: string;
    /**
    * The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPathPattern'?: string;
    /**
    * The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.
    */
    'urlPattern'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "basicAuthCredentials",
            "baseName": "basicAuthCredentials",
            "type": "RequestPatternBasicAuthCredentials"
        },
        {
            "name": "bodyPatterns",
            "baseName": "bodyPatterns",
            "type": "Array<any>"
        },
        {
            "name": "cookies",
            "baseName": "cookies",
            "type": "any"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "any"
        },
        {
            "name": "method",
            "baseName": "method",
            "type": "string"
        },
        {
            "name": "_queryParameters",
            "baseName": "queryParameters",
            "type": "any"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "urlPath",
            "baseName": "urlPath",
            "type": "string"
        },
        {
            "name": "urlPathPattern",
            "baseName": "urlPathPattern",
            "type": "string"
        },
        {
            "name": "urlPattern",
            "baseName": "urlPattern",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StubMappingRequest.attributeTypeMap;
    }
}

export class StubMappingResponse {
    /**
    * Extra request headers to send when proxying to another host.
    */
    'additionalProxyRequestHeaders'?: any;
    /**
    * The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
    */
    'base64Body'?: string;
    /**
    * The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
    */
    'body'?: string;
    /**
    * The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
    */
    'bodyFileName'?: string;
    /**
    * Random delay settings.
    */
    'delayDistribution'?: any;
    /**
    * The fault to apply (instead of a full, valid response).
    */
    'fault'?: StubMappingResponse.FaultEnum;
    /**
    * Number of milliseconds to delay be before sending the response.
    */
    'fixedDelayMilliseconds'?: number;
    /**
    * Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
    */
    'fromConfiguredStub'?: boolean;
    /**
    * Map of response headers to send
    */
    'headers'?: any;
    /**
    * The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
    */
    'jsonBody'?: any;
    /**
    * The base URL of the target to proxy matching requests to.
    */
    'proxyBaseUrl'?: string;
    /**
    * The HTTP status code to be returned
    */
    'status'?: number;
    /**
    * The HTTP status message to be returned
    */
    'statusMessage'?: string;
    /**
    * Parameters to apply to response transformers.
    */
    'transformerParameters'?: any;
    /**
    * List of names of transformers to apply to this response.
    */
    'transformers'?: Array<string>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "additionalProxyRequestHeaders",
            "baseName": "additionalProxyRequestHeaders",
            "type": "any"
        },
        {
            "name": "base64Body",
            "baseName": "base64Body",
            "type": "string"
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string"
        },
        {
            "name": "bodyFileName",
            "baseName": "bodyFileName",
            "type": "string"
        },
        {
            "name": "delayDistribution",
            "baseName": "delayDistribution",
            "type": "any"
        },
        {
            "name": "fault",
            "baseName": "fault",
            "type": "StubMappingResponse.FaultEnum"
        },
        {
            "name": "fixedDelayMilliseconds",
            "baseName": "fixedDelayMilliseconds",
            "type": "number"
        },
        {
            "name": "fromConfiguredStub",
            "baseName": "fromConfiguredStub",
            "type": "boolean"
        },
        {
            "name": "headers",
            "baseName": "headers",
            "type": "any"
        },
        {
            "name": "jsonBody",
            "baseName": "jsonBody",
            "type": "any"
        },
        {
            "name": "proxyBaseUrl",
            "baseName": "proxyBaseUrl",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "number"
        },
        {
            "name": "statusMessage",
            "baseName": "statusMessage",
            "type": "string"
        },
        {
            "name": "transformerParameters",
            "baseName": "transformerParameters",
            "type": "any"
        },
        {
            "name": "transformers",
            "baseName": "transformers",
            "type": "Array<string>"
        }    ];

    static getAttributeTypeMap() {
        return StubMappingResponse.attributeTypeMap;
    }
}

export namespace StubMappingResponse {
    export enum FaultEnum {
        CONNECTIONRESETBYPEER = <any> 'CONNECTION_RESET_BY_PEER',
        EMPTYRESPONSE = <any> 'EMPTY_RESPONSE',
        MALFORMEDRESPONSECHUNK = <any> 'MALFORMED_RESPONSE_CHUNK',
        RANDOMDATATHENCLOSE = <any> 'RANDOM_DATA_THEN_CLOSE'
    }
}
export class StubMappings {
    'mappings'?: StubMappingsMappings;
    'meta'?: StubMappingsMeta;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "mappings",
            "baseName": "mappings",
            "type": "StubMappingsMappings"
        },
        {
            "name": "meta",
            "baseName": "meta",
            "type": "StubMappingsMeta"
        }    ];

    static getAttributeTypeMap() {
        return StubMappings.attributeTypeMap;
    }
}

export class StubMappingsMappings {
    /**
    * This stub mapping's unique identifier
    */
    'id'?: string;
    /**
    * Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
    */
    'metadata'?: any;
    /**
    * The new state for the scenario to be updated to after this stub is served.
    */
    'newScenarioState'?: string;
    /**
    * Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
    */
    'persistent'?: boolean;
    /**
    * A map of the names of post serve action extensions to trigger and their parameters.
    */
    'postServeActions'?: any;
    /**
    * This stub mapping's priority relative to others. 1 is highest.
    */
    'priority'?: number;
    'request'?: StubMappingRequest;
    /**
    * The required state of the scenario in order for this stub to be matched.
    */
    'requiredScenarioState'?: string;
    'response'?: StubMappingResponse;
    /**
    * The name of the scenario that this stub mapping is part of
    */
    'scenarioName'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "metadata",
            "baseName": "metadata",
            "type": "any"
        },
        {
            "name": "newScenarioState",
            "baseName": "newScenarioState",
            "type": "string"
        },
        {
            "name": "persistent",
            "baseName": "persistent",
            "type": "boolean"
        },
        {
            "name": "postServeActions",
            "baseName": "postServeActions",
            "type": "any"
        },
        {
            "name": "priority",
            "baseName": "priority",
            "type": "number"
        },
        {
            "name": "request",
            "baseName": "request",
            "type": "StubMappingRequest"
        },
        {
            "name": "requiredScenarioState",
            "baseName": "requiredScenarioState",
            "type": "string"
        },
        {
            "name": "response",
            "baseName": "response",
            "type": "StubMappingResponse"
        },
        {
            "name": "scenarioName",
            "baseName": "scenarioName",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return StubMappingsMappings.attributeTypeMap;
    }
}

export class StubMappingsMeta {
    'total': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return StubMappingsMeta.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
        "StubMappingResponse.FaultEnum": StubMappingResponse.FaultEnum,
}

let typeMap: {[index: string]: any} = {
    "ContentPattern": ContentPattern,
    "GlobalSettings": GlobalSettings,
    "LoggedRequest": LoggedRequest,
    "RequestPattern": RequestPattern,
    "RequestPatternBasicAuthCredentials": RequestPatternBasicAuthCredentials,
    "Scenarios": Scenarios,
    "ScenariosScenarios": ScenariosScenarios,
    "Snapshot": Snapshot,
    "StartRecording": StartRecording,
    "StartRecordingFilters": StartRecordingFilters,
    "StubMapping": StubMapping,
    "StubMappingRequest": StubMappingRequest,
    "StubMappingResponse": StubMappingResponse,
    "StubMappings": StubMappings,
    "StubMappingsMappings": StubMappingsMappings,
    "StubMappingsMeta": StubMappingsMeta,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum DefaultApiApiKeys {
}

export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
    }
    /**
     * Delete all stub mappings
     */
    public mappingsDelete () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/mappings';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Find stubs by matching on their metadata
     * @param body 
     */
    public mappingsFindByMetadataPost (body: ContentPattern) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/mappings/find-by-metadata';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling mappingsFindByMetadataPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ContentPattern")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get all stub mappings
     * @param limit The maximum number of results to return
     * @param offset The start index of the results to return
     */
    public mappingsGet (limit?: number, offset?: number) : Promise<{ response: http.ClientResponse; body: StubMappings;  }> {
        const localVarPath = this.basePath + '/mappings';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StubMappings;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StubMappings");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a new stub mapping
     * @param body 
     */
    public mappingsPost (body: StubMapping) : Promise<{ response: http.ClientResponse; body: StubMapping;  }> {
        const localVarPath = this.basePath + '/mappings';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling mappingsPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "StubMapping")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StubMapping;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StubMapping");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Remove stubs by matching on their metadata
     * @param body 
     */
    public mappingsRemoveByMetadataPost (body: ContentPattern) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/mappings/remove-by-metadata';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling mappingsRemoveByMetadataPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "ContentPattern")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Reset stub mappings (restore to defaults defined back the backing store)
     */
    public mappingsResetPost () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/mappings/reset';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Save all persistent stub mappings to the backing store
     */
    public mappingsSavePost () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/mappings/save';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete a stub mapping
     * @param stubMappingId The UUID of stub mapping
     */
    public mappingsStubMappingIdDelete (stubMappingId: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/mappings/{stubMappingId}'
            .replace('{' + 'stubMappingId' + '}', encodeURIComponent(String(stubMappingId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'stubMappingId' is not null or undefined
        if (stubMappingId === null || stubMappingId === undefined) {
            throw new Error('Required parameter stubMappingId was null or undefined when calling mappingsStubMappingIdDelete.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get a single stub mapping
     * @param stubMappingId The UUID of stub mapping
     */
    public mappingsStubMappingIdGet (stubMappingId: string) : Promise<{ response: http.ClientResponse; body: StubMapping;  }> {
        const localVarPath = this.basePath + '/mappings/{stubMappingId}'
            .replace('{' + 'stubMappingId' + '}', encodeURIComponent(String(stubMappingId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'stubMappingId' is not null or undefined
        if (stubMappingId === null || stubMappingId === undefined) {
            throw new Error('Required parameter stubMappingId was null or undefined when calling mappingsStubMappingIdGet.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StubMapping;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StubMapping");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update an existing stub mapping
     * @param stubMappingId The UUID of stub mapping
     * @param body 
     */
    public mappingsStubMappingIdPut (stubMappingId: string, body: StubMapping) : Promise<{ response: http.ClientResponse; body: StubMapping;  }> {
        const localVarPath = this.basePath + '/mappings/{stubMappingId}'
            .replace('{' + 'stubMappingId' + '}', encodeURIComponent(String(stubMappingId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'stubMappingId' is not null or undefined
        if (stubMappingId === null || stubMappingId === undefined) {
            throw new Error('Required parameter stubMappingId was null or undefined when calling mappingsStubMappingIdPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling mappingsStubMappingIdPut.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "StubMapping")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StubMapping;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StubMapping");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Find at most 3 near misses for closest logged requests to the specified request pattern
     * @param body 
     */
    public nearMissesRequestPatternPost (body: RequestPattern) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/near-misses/request-pattern';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling nearMissesRequestPatternPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RequestPattern")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Find at most 3 near misses for closest stub mappings to the specified request
     * @param body 
     */
    public nearMissesRequestPost (body: LoggedRequest) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/near-misses/request';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling nearMissesRequestPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "LoggedRequest")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Take a snapshot recording
     * @param body 
     */
    public recordingsSnapshotPost (body: Snapshot) : Promise<{ response: http.ClientResponse; body: StubMappings;  }> {
        const localVarPath = this.basePath + '/recordings/snapshot';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling recordingsSnapshotPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "Snapshot")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StubMappings;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StubMappings");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Start recording stub mappings
     * @param body 
     */
    public recordingsStartPost (body: StartRecording) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/recordings/start';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling recordingsStartPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "StartRecording")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get the recording status (started or stopped)
     */
    public recordingsStatusGet () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/recordings/status';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Stop recording stub mappings
     */
    public recordingsStopPost () : Promise<{ response: http.ClientResponse; body: StubMappings;  }> {
        const localVarPath = this.basePath + '/recordings/stop';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StubMappings;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StubMappings");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Count requests logged in the journal matching the specified criteria
     * @param body 
     */
    public requestsCountPost (body: RequestPattern) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests/count';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling requestsCountPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RequestPattern")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete all received requests
     */
    public requestsDelete () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve details of requests logged in the journal matching the specified criteria
     * @param body 
     */
    public requestsFindPost (body: RequestPattern) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests/find';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling requestsFindPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "RequestPattern")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get received requests
     * @param limit The maximum number of results to return
     * @param since Only return logged requests after this date
     */
    public requestsGet (limit?: string, since?: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "string");
        }

        if (since !== undefined) {
            localVarQueryParameters['since'] = ObjectSerializer.serialize(since, "string");
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param requestId The UUID of the logged request
     */
    public requestsRequestIdGet (requestId: string) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests/{requestId}'
            .replace('{' + 'requestId' + '}', encodeURIComponent(String(requestId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'requestId' is not null or undefined
        if (requestId === null || requestId === undefined) {
            throw new Error('Required parameter requestId was null or undefined when calling requestsRequestIdGet.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Empty the request journal
     */
    public requestsResetPost () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests/reset';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get details of logged requests that weren't matched by any stub mapping
     */
    public requestsUnmatchedGet () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests/unmatched';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Retrieve near-misses for all unmatched requests
     */
    public requestsUnmatchedNearMissesGet () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/requests/unmatched/near-misses';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Reset mappings to the default set and reset the request journal
     */
    public resetPost () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/reset';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Get all scenarios
     */
    public scenariosGet () : Promise<{ response: http.ClientResponse; body: Scenarios;  }> {
        const localVarPath = this.basePath + '/scenarios';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Scenarios;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Scenarios");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Reset the state of all scenarios
     */
    public scenariosResetPost () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/scenarios/reset';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update global settings
     * @param body 
     */
    public settingsPost (body: GlobalSettings) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/settings';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling settingsPost.');
        }


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "GlobalSettings")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Shutdown the WireMock server
     */
    public shutdownPost () : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/shutdown';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};


        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
